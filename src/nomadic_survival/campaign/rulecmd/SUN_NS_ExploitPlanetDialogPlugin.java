package nomadic_survival.campaign.rulecmd;

import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.campaign.*;
import com.fs.starfarer.api.campaign.rules.MemoryAPI;
import com.fs.starfarer.api.impl.campaign.rulecmd.BaseCommandPlugin;
import com.fs.starfarer.api.util.Misc;
import nomadic_survival.ModPlugin;
import nomadic_survival.OperationType;
import nomadic_survival.Util;
import nomadic_survival.campaign.OperationInteractionDialogPlugin;
import nomadic_survival.campaign.RecyclePickerListener;
import nomadic_survival.campaign.intel.OperationIntel;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class SUN_NS_ExploitPlanetDialogPlugin extends BaseCommandPlugin {
    @Override
    public boolean execute(String ruleId, InteractionDialogAPI dialog, List<Misc.Token> params, Map<String, MemoryAPI> memoryMap) {
        try {
            int optionIndex = params.get(0).getInt(memoryMap);
            PlanetAPI planet = Util.getInteractionPlanet(dialog);
            OperationIntel intel = OperationIntel.getAllForPlanet(planet).get(optionIndex);

            if(intel.getType().isRefitOp()) {
                // Prevent other conditionals from being selected
            } else if(intel.getType().isRecycleOp()) {
                final CampaignFleetAPI pf = Global.getSector().getPlayerFleet();
                CargoAPI copy = Global.getFactory().createCargo(false);
                Set<String> validInputIDs = new HashSet<>();

                for(OperationType.Input in : intel.getType().getInputs()) {
                    validInputIDs.add(in.getCommodityID());
                }

                boolean includeWeapons = validInputIDs.contains("ship_weapons");

                for (CargoStackAPI stack : pf.getCargo().getStacksCopy()) {
                    if((includeWeapons && (stack.isWeaponStack() || stack.isFighterWingStack()))
                            || (stack.isCommodityStack() && validInputIDs.contains(stack.getCommodityId()))) {

                        copy.addFromStack(stack);
                    }

//                    if((stack.isWeaponStack() || stack.isFighterWingStack()) && validInputIDs.contains("ship_weapons")) {
//                        copy.addFromStack(stack);
//                    } else if(validInputIDs.contains(stack.getCommodityId())) {
//                        copy.addFromStack(stack);
//                    }
                }

                copy.sort();

                dialog.showCargoPickerDialog("Select materials to recycle", "Confirm", "Cancel", true,
                        RecyclePickerListener.WIDTH, copy, new RecyclePickerListener(dialog, intel));
            } else {
                InteractionDialogPlugin mainPlugin = dialog.getPlugin();
                InteractionDialogPlugin exploitPlugin = new OperationInteractionDialogPlugin(mainPlugin, intel);

                dialog.setPlugin(exploitPlugin);
                dialog.getPlugin().init(dialog);
            }

            return true;
        } catch (Exception e) {
            ModPlugin.reportCrash(e);
            return false;
        }
    }
}
